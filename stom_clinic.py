# -*- coding: utf-8 -*-
import io
import random
import logging
import sqlite3
import datetime as dt
import pandas as pd
import os
from pathlib import Path
from aiogram.dispatcher.filters import BoundFilter
from random import shuffle
from datetime import datetime, timezone
from aiogram import Bot
from aiogram import Dispatcher
from aiogram import executor
from aiogram import types
from aiogram.types import ParseMode, CallbackQuery, message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.markdown import text, bold  # , italic, code, pre
from aiogram.dispatcher.filters import CommandStart
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State


logging.basicConfig(format=u'%(filename)s [ LINE:%(lineno)+3s ]#%(levelname)+8s [%(asctime)s]  %(message)s',
                    level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
bd = sqlite3.connect('stom.db')
cur = bd.cursor()
bd.commit()
bd.execute(
    'CREATE TABLE IF NOT EXISTS Users'
    '(id int NOT NULL, '
    'phone NULL, '
    'instanse NULL, '
    'real_name NULL, '
    'date_birth int NULL, '
    'serv_book int NULL, '
    'garante NULL, '
    'main_recom int, '
    'plan NULL, '
    'photoproc NULL, '
    'secret_key int, '
    'doctor NULL, '
    'PRIMARY KEY(phone))')

bd.execute(
    'CREATE TABLE IF NOT EXISTS Meets'
    '(id_meets int NOT NULL,'
    'id int NULL,'
    'date NULL, '
    'time NULL, '
    'price NULL, '
    'price_state NULL, '
    'plan NULL, '
    'recomend NULL,'
    'act NULL,'
    'approve NULL,'
    'real_date NULL,'
    'real_name NULL,'
    'UNIQUE(id_meets))')

bd.commit()

# –§–∏–ª—å—Ç—Ä –Ω–∞ –∞–¥–º–∏–Ω–æ–≤
my_admin_id = []


class IsAdmin(BoundFilter):
    async def check(self, message: types.Message) -> bool:
        if message.from_user.id in my_admin_id:
            return True

# –°—Ç–µ–π—Ç—ã
class Change(StatesGroup):
    ChangeMeet = State()

class Phone(StatesGroup):
    PhoneSearch = State()

class Client(StatesGroup):
    ClientUp = State()
    ClientUpp = State()

# –í—Å–µ –∫–Ω–æ–ø–∫–∏ –±–æ—Ç–∞
b1 = types.InlineKeyboardButton(text="–ú–æ–π –∫–∞–±–∏–Ω–µ—Çü¶∑", callback_data="MyButton1")
b2 = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ‚òé", callback_data="MyButton3")
b3 = types.InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è‚úèÔ∏è", callback_data="MyButton3")
b4 = types.InlineKeyboardButton(text="–û –Ω–∞—Åüë©üèº‚Äç‚öïÔ∏è", callback_data="MyButton4")
b5 = types.InlineKeyboardButton(text="–ê–¥–º–∏–Ω–∫–∞‚öôÔ∏è", callback_data="MyButton5")
b6 = types.InlineKeyboardButton(text="–°–µ—Ä–≤–∏—Å–Ω–∞—è –∫–Ω–∏–∂–∫–∞üìñ", callback_data="MyButton6")
b7 = types.InlineKeyboardButton(text="–ê–¥—Ä–µ—Åüì™", callback_data="MyButton7")
b8 = types.InlineKeyboardButton(text="–ö–∞–Ω–∞–ªüì≤", callback_data="MyButton8")
b9 = types.InlineKeyboardButton(text="–ê–∫—Ü–∏–∏üßÆ", callback_data="MyButton9")
b10 = types.InlineKeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–πüìÜ", callback_data="MyButton10")
b11 = types.InlineKeyboardButton(text="–ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—èüìà", callback_data="MyButton11")
b12 = types.InlineKeyboardButton(text="–£—Å–ª–æ–≤–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏üóû", callback_data="MyButton12")
b13 = types.InlineKeyboardButton(text="üßº—Ç–µ–ª–µ—Ñ–æ–Ω", callback_data="MyButton13")
b14 = types.InlineKeyboardButton(text="üßº—Ñ–∏–æ", callback_data="MyButton14")
b15 = types.InlineKeyboardButton(text="üßº–¥—Ä", callback_data="MyButton15")
b16 = types.InlineKeyboardButton(text="–°–∞–π—Çüíª", callback_data="MyButton16")
b17 = types.InlineKeyboardButton(text="üßº—Å–µ—Ä–≤ –∫–Ω–∏–≥–∞", callback_data="MyButton17")
b18 = types.InlineKeyboardButton(text="üßº–≥–∞—Ä–∞–Ω—Ç–∏—è", callback_data="MyButton18")
b19 = types.InlineKeyboardButton(text="üßº–æ–±—â —Ä–µ–∫–æ–º–µ–Ω–¥", callback_data="MyButton19")
b20 = types.InlineKeyboardButton(text="üßº–∫–ª—é—á –ø–∞—Ü–∏–µ–Ω—Ç–∞", callback_data="MyButton20")
b21 = types.InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—åüìù", callback_data="MyButton21")
b22 = types.InlineKeyboardButton(text='–ó–∞–ø–∏—Å–∏üîè', callback_data="MyButton22")
b24 = types.InlineKeyboardButton(text="–§–æ—Ç–æ–ø—Ä–æ—Ç–æ–∫–æ–ªüì∏", callback_data="MyButton24")
b25 = types.InlineKeyboardButton(text="–ê–∫—Çüìú", callback_data="MyButton25")
b26 = types.InlineKeyboardButton(text="–ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—èüìú", callback_data="MyButton26")
b27 = types.InlineKeyboardButton(text="—Ñ–æ—Ç–æ–ø—Ä–æ—Ç–æ–∫–æ–ªüìú", callback_data="MyButton27")
b30 = types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å‚úÖ", callback_data="MyButton30")
b31 = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—åüß©", callback_data="MyButton31")
b32 = types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å‚ùå", callback_data="MyButton32")
b34 = types.InlineKeyboardButton(text="–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å‚úÇÔ∏è", callback_data="MyButton34")
b28 = types.InlineKeyboardButton(text="üßºid", callback_data="MyButton28")
b40 = types.InlineKeyboardButton(text="üßº–¥–∞—Ç–∞", callback_data="MyButton40")
b41 = types.InlineKeyboardButton(text="üßº–≤—Ä–µ–º—è", callback_data="MyButton41")
b42 = types.InlineKeyboardButton(text="üßº—Ü–µ–Ω–∞", callback_data="MyButton42")
b43 = types.InlineKeyboardButton(text="üßº–æ–ø–ª–∞—Ç–∞", callback_data="MyButton43")
b44 = types.InlineKeyboardButton(text="üßº–ø–ª–∞–Ω", callback_data="MyButton44")
b45 = types.InlineKeyboardButton(text="üßº—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="MyButton45")
b51 = types.InlineKeyboardButton(text="üíæ–ø–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è", callback_data="MyButton51")
b52 = types.InlineKeyboardButton(text="üíæ—Ñ–æ—Ç–æ–ø—Ä–æ—Ç–æ–∫–æ–ª", callback_data="MyButton52")
b53 = types.InlineKeyboardButton(text="–ê–¥–º–∏–Ω—ãüóø", callback_data="MyButton53")
b55 = types.InlineKeyboardButton(text="–ü–∞—Ü–∏–µ–Ω—Ç—ãüåù", callback_data="MyButton55")
b59 = types.InlineKeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç—åüîî", callback_data="MyButton59")
b61 = types.InlineKeyboardButton(text="‚úÖ–Ø –ø—Ä–∏–¥—É", callback_data="MyButton61")
b62 = types.InlineKeyboardButton(text="üö∑–Ø –Ω–µ –ø—Ä–∏–¥—É", callback_data="MyButton62")
b66 = types.InlineKeyboardButton(text="–°—Ç–∞—Ç—É—Åüéí", callback_data="MyButton66")
b77 = types.InlineKeyboardButton(text="–ü–æ –Ω–æ–º–µ—Ä—É‚ö†Ô∏è", callback_data="MyButton77")
b89 = types.InlineKeyboardButton(text="–í–Ω–µ—Å—Ç–∏ –∫–∞–∫ –ø–∞—Ü–∏–µ–Ω—Ç–∞üì©", callback_data="MyButton89")
b98 = types.InlineKeyboardButton(text="–í–Ω–µ—Å—Ç–∏ –∫–∞–∫ –ø–∞—Ü–∏–µ–Ω—Ç–∞üì©", callback_data="MyButton98")
b95 = types.InlineKeyboardButton(text="–í–Ω–µ—Å—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∞üë©üèª‚Äçüéì", callback_data="MyButton95")


# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
@dp.message_handler(CommandStart(), state="*")
async def send_welcome(message, state: FSMContext):
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    # –ø–æ–ª—É—á–∏–º –≤—Å–µ ID –∞–¥–º–∏–Ω–æ–≤
    admins = cur.execute('SELECT id FROM Users WHERE instanse == "admin"').fetchall()
    admin_list = [x[0] for x in admins]
    for i in admin_list:
        if i not in my_admin_id:
            my_admin_id.append(i)
    # –ø–æ–ª—É—á–∏–º –≤—Å–µ ID –∞–¥–º–∏–Ω–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤
    friends = cur.execute('SELECT id FROM Users WHERE instanse = "friend"').fetchall()
    friends_list = [x[0] for x in friends]
    # —Å–æ–∑–¥–∞–¥–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    guest_keyboard = types.InlineKeyboardMarkup(row_width=1)
    friend_keyboard = types.InlineKeyboardMarkup(row_width=1)
    admin_keyboard = types.InlineKeyboardMarkup(row_width=1)
    guest_keyboard.add(b4, b2)
    friend_keyboard.add(b1, b2, b4)
    admin_keyboard.add(b1, b4, b5)
    # –ö–ª–∏–µ–Ω—Ç—Å–∫–æ–µ –º–µ–Ω—é
    if user_id in friends_list:
        text_message_g = f'–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ, {user_name}'
        start_message = await bot.send_message(user_id, text_message_g, reply_markup=friend_keyboard)
        await bot.pin_chat_message(user_id, start_message.message_id)
    # –ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é–´–§–í–´–§–í–´–§–í
    elif user_id in admin_list or user_id in []:
        info_for_ad = (f'*üî±–ò–ù–°–¢–†–£–ö–¶–ò–Ø –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–íüî±*\n'
                       f' \n'
                       f'*–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞?*\n'
                       f'‚ö†Ô∏è*–°–ø–æ—Å–æ–± 1.* –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É –∫–æ–Ω—Ç–∞–∫—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞(–º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)\n'
                       f'‚ö†Ô∏è*–°–ø–æ—Å–æ–± 2.* –ê–¥–º–∏–Ω–∫–∞ ==> –ü–æ –Ω–æ–º–µ—Ä—É ==> –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 89296081589 ==> –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ, –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–í–Ω–µ—Å—Ç–∏ –∫–∞–∫ –ø–∞—Ü–∏–µ–Ω—Ç–∞"\n'
                        f'‚ö†Ô∏è*–°–ø–æ—Å–æ–± 3.* –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–∏–ø–æ–≤–æ–π —à–∞–±–ª–æ–Ω –±–æ—Ç—É –∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞–ø–∏—Å–∞—Ç—å "–±–¥"\n'
                         f' \n'
                        f'*–ö–∞–∫ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø–∞—Ü–∏–µ–Ω—Ç—É?*\n'
                       f'‚ö†Ô∏è*–°–ø–æ—Å–æ–± 1.* –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —á–∞—Ç —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–π—Ç–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n'
                       f'üîé–ü–æ–∏—Å–∫ —é–∑–µ—Ä–∞ –≤ –±–∞–∑–µ: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –∞–¥–º–∏–Ω–∫–∞(–ø–æ –Ω–æ–º–µ—Ä—É) –∏–ª–∏ –∞–¥–º–∏–Ω–∫–∞(–ø–∞—Ü–∏–µ–Ω—Ç—ã).\n'
                        f'–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏(–ø—Ä–æ—Ñ–∏–ª—å —é–∑–µ—Ä–∞, –∑–∞–ø–∏—Å–∏) –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –Ω–∞–∂–∏–º–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n'
                       f'–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ –ø–∞—Ü–∏–µ–Ω—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É —Ñ–∞–π–ª –≤ –≤–∏–¥–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞–ø–∏—Å–∞—Ç—å "–æ–±–Ω–æ–≤–∏—Ç—å"\n'
                       f'‚ö†Ô∏è*–°–ø–æ—Å–æ–± 2.*–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–∏–ø–æ–≤–æ–π —à–∞–±–ª–æ–Ω –±–æ—Ç—É –∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞–ø–∏—Å–∞—Ç—å "–±–¥"\n'
                       )
        await bot.send_message(user_id, info_for_ad,
                                               parse_mode='MarkDown')

        text_message_g = (
                          f'*–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {len(admin_list) + len(friends_list)}\n'
                          f'*–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:* {len(admin_list)}\n'  
                          f'*–ü–∞—Ü–∏–µ–Ω—Ç—ã:* {len(friends_list)}\n'
                          )
        start_message = await bot.send_message(user_id, text_message_g, reply_markup=admin_keyboard,
                                               parse_mode='MarkDown')

        await bot.pin_chat_message(user_id, start_message.message_id)
    # –°—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è —é–∑–µ—Ä–æ–≤ –Ω–µ –∏–∑ –±–∞–∑—ã
    else:
        text_message_g = '–¶–∏—Ñ—Ä–æ–≤–∞—è —Å—Ç–æ–º–æ—Ç–∞–ª–æ–≥–∏—è - —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏—è –∑—É–±–æ–≤'
        await bot.send_message(user_id, text_message_g, reply_markup=guest_keyboard)

# –ö–∞–±–∏–Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞
user_path = []
@dp.callback_query_handler(text=['MyButton10'], state="*")
async def MyCabinet(call, state: FSMContext):
    user_id = call.from_user.id
    # –ü–æ–ª—É—á–∏–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
    my_meets = cur.execute('SELECT date, time, plan, price, price_state FROM Meets WHERE id=? ORDER BY real_date DESC', (user_id,)).fetchall()
    meets_count = len(my_meets)
    dates = []
    time = []
    plan = []
    price = []
    price_state = []
    for i in my_meets:
        dates.append(i[0])
        time.append(i[1])
        plan.append(i[2])
        price.append(i[3])
        price_state.append(i[4])
    aps = f'–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ø—Ä–∏—ë–º: {meets_count}\n'
    for i in range(len(dates)):
        mes = f'*–î–∞—Ç–∞* {dates[i]} *–í—Ä–µ–º—è* {time[i]} *{price_state[i]}* {price[i]}\n*–ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è* {plan[i]}'
        aps = aps + mes + '\n'
    # –°–æ–∑–¥–∞–¥–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
    f_keyboard = types.InlineKeyboardMarkup(row_width=1)
    user_path.clear()
    for i in dates:
        f_keyboard.add(types.InlineKeyboardButton(text=i, callback_data=i), b25)
        user_path.append(i)
    await bot.send_message(chat_id=user_id,
                           text=aps, parse_mode='MarkDown', reply_markup=f_keyboard)
update_user = []

# –§–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏
@dp.callback_query_handler(text=['MyButton11', 'MyButton24', 'MyButton26', 'MyButton27'], state="*")
async def MyCallBack11(call, state: FSMContext):
    user_id = call.from_user.id
    if call.data == 'MyButton11':
        my_file = cur.execute('SELECT plan FROM Users WHERE id = ?', (user_id,)).fetchone()
        if my_file[0] is not None:
            file = open(my_file[0], 'rb')
            await bot.send_document(call.from_user.id, file)

        else:
            await bot.send_message(chat_id=user_id,
                                   text='–ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–≥—Ä—É–∂–µ–Ω –≤ –±–∞–∑—É. –ó–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
    elif call.data == 'MyButton24':
        my_file = cur.execute('SELECT photoproc FROM Users WHERE id = ?', (user_id,)).fetchone()
        if my_file[0] is not None:
            file = open(my_file[0], 'rb')
            await bot.send_document(call.from_user.id, file)
        else:
            await bot.send_message(chat_id=user_id,
                                   text='–§–æ—Ç–æ–ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–≥—Ä—É–∂–µ–Ω –≤ –±–∞–∑—É. –ó–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
    elif call.data == 'MyButton26':
        my_file = cur.execute('SELECT plan FROM Users WHERE id = ?', (update_user[-1],)).fetchone()
        if my_file[0] is not None:
            file = open(my_file[0], 'rb')
            await bot.send_document(call.from_user.id, file)

        else:
            await bot.send_message(chat_id=user_id,
                                   text='–ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–≥—Ä—É–∂–µ–Ω –≤ –±–∞–∑—É.')
    elif call.data == 'MyButton27':
        my_file = cur.execute('SELECT photoproc FROM Users WHERE id = ?', (update_user[-1],)).fetchone()
        if my_file[0] is not None:
            file = open(my_file[0], 'rb')
            await bot.send_document(call.from_user.id, file)
        else:
            await bot.send_message(chat_id=user_id,
                                   text='–§–æ—Ç–æ–ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–≥—Ä—É–∂–µ–Ω –≤ –±–∞–∑—É.')


# –ê–¥–º–∏–Ω–∫–∞
@dp.callback_query_handler(text=['MyButton5'], state="*")
async def MyCallBack5(call, state: FSMContext):
    user_id = call.from_user.id
    all_meets = cur.execute('SELECT COUNT(*) FROM Meets').fetchone()
    all_users = cur.execute('SELECT COUNT(*) FROM Users').fetchone()
    ad_keyboard = types.InlineKeyboardMarkup(row_width=1)
    ad_keyboard.add(b55, b53, b66, b77)
    admins_info = f'–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - {all_users[0]} –∑–∞–ø–∏—Å–µ–π - {all_meets[0]}'
    await bot.send_message(user_id, admins_info,
                           reply_markup=ad_keyboard)



@dp.callback_query_handler(text=['MyButton66'], state="*")
async def MyCallBack66(call, state: FSMContext):
    user_id = call.from_user.id
    current_date = cur.execute('SELECT date()').fetchone()
    next_date =  cur.execute("SELECT date('now','+14 days')").fetchone()
    true_rows = cur.execute('SELECT date, time, id, price, price_state, approve, real_name FROM Meets WHERE real_date >=? AND real_date <= ? ORDER BY real_date DESC', (current_date[0], next_date[0], )).fetchall()
    dates = []
    times = []
    id = []
    prices = []
    price_state = []
    approve = []
    real_names = []
    for i in true_rows:
        dates.append(i[0])
        times.append(i[1])
        id.append(i[2])
        prices.append(i[3])
        price_state.append(i[4])
        approve.append(i[5])
        real_names.append(i[6])

    dontget_money = 0
    get_money = 0
    for i in range(len(prices)):
        if price_state[i] == '–æ–ø–ª–∞—á–µ–Ω–æ':
            get_money += int(prices[i])
        elif price_state[i] == '–Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ':
            dontget_money += int(prices[i])

    aps = (f'*–ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–ø–∏—Å–∏*\n'
        f'–í—Å–µ–≥–æ: *{len(dates)}* –∑–∞–ø–∏—Å–µ–π\n'
        f'–í—Å–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ: *{get_money+dontget_money}* —Ä—É–±.\n'
        f'–û–ø–ª–∞—á–µ–Ω–æ: *{get_money}* —Ä—É–±.\n'
        f'–ö –æ–ø–ª–∞—Ç–µ: *{dontget_money}* —Ä—É–±.\n'
           f' \n')

    for i in range(len(dates)):
        mes = f' \n–î–∞—Ç–∞* {dates[i]}* –í—Ä–µ–º—è* {times[i]}* –ü–∞—Ü–∏–µ–Ω—Ç* {real_names[i]} {prices[i]} *—Ä—É–±. *{price_state[i]}* –ü–æ—Å–µ—â–µ–Ω–∏–µ* {approve[i]}*'
        aps = aps + mes + '\n'
    app_keyb = types.InlineKeyboardMarkup(row_width=1)
    app_keyb.add(b59,b5)
    await bot.send_message(user_id, aps, parse_mode='MarkDown', reply_markup=app_keyb)




@dp.callback_query_handler(text=['MyButton59'], state="*")
async def MyCallBack59(call, state: FSMContext):
    user_id = call.from_user.id
    current_date = cur.execute('SELECT date()').fetchone()
    next_date = cur.execute("SELECT date('now','+3 days')").fetchone()
    true_rows = cur.execute(
        'SELECT date, time, id, price, price_state, approve, real_name, id_meets FROM Meets WHERE real_date >=? AND real_date <= ? ORDER BY real_date DESC',
        (current_date[0], next_date[0],)).fetchall()
    dates = []
    times = []
    id = []
    prices = []
    price_state = []
    approve = []
    real_names = []
    id_meets = []
    for i in true_rows:
        dates.append(i[0])
        times.append(i[1])
        id.append(i[2])
        prices.append(i[3])
        price_state.append(i[4])
        approve.append(i[5])
        real_names.append(i[6])
        id_meets.append(i[7])
    client_keyboard = types.InlineKeyboardMarkup(row_width=1)
    client_keyboard.add(b61, b62)
    for i in range(len(id)):
        checking = cur.execute("SELECT phone FROM Users WHERE id=?", (id[i],)).fetchone()

        if approve[i] == '–Ω–µ –∑–∞–ø—Ä–æ—à–µ–Ω–æ' and str(checking[0])!= id[i]:
            client_approve_mes = (f'–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ *{real_names[i]}*. –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –ª–µ—á–µ–Ω–∏–µ *{dates[i]} –≤ {times[i]}*\n'
                              f'–ö –æ–ø–ª–∞—Ç–µ *{prices[i]} —Ä—É–±.* —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã *{price_state[i]}*\n'
                              f'–ü—Ä–æ—Å–∏–º –í–∞—Å *–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å* —Å–≤–æ—ë –ø–æ—Å–µ—â–µ–Ω–∏–µ.')
            client_keyboard = types.InlineKeyboardMarkup(row_width=1)
            client_keyboard.add(b61,b62)
            try:
                await bot.send_message(id[i], client_approve_mes,
                           reply_markup=client_keyboard, parse_mode='MarkDown')
                cur.execute('UPDATE Meets SET approve=? WHERE id_meets=?', ('–∑–∞–ø—Ä–æ—à–µ–Ω–æ', id_meets[i],))
                bd.commit()
                z_keyboard = types.InlineKeyboardMarkup(row_width=1)
                z_keyboard.add(b5)
                await bot.send_message(user_id, f'–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—ã–ª –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω {real_names[i]}')
            except:
                pass
        elif str(checking[0])==str(id[i]):
            await bot.send_message(user_id, f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —é–∑–µ—Ä—É {real_names[i]}. –¢–∞–∫ –∫–∞–∫ —É –Ω–µ–≥–æ –Ω–µ —É–∫–∞–∑–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID')



my_call_clients = []
# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞
@dp.callback_query_handler(text=['MyButton55', 'MyButton53'], state="*")
async def MyCallBack55(call, state: FSMContext):
    user_id = call.from_user.id
    if call.data == 'MyButton55':
        user_all = cur.execute('SELECT real_name FROM Users WHERE real_name IS NOT NULL AND instanse == "friend"').fetchall()
        user_name_list = [x[0] for x in user_all]
        f_keyboard = types.InlineKeyboardMarkup(row_width=1)
        my_call_clients.clear()
        for i in user_name_list:
            f_keyboard.add(types.InlineKeyboardButton(text=i, callback_data=i))
            my_call_clients.append(i)
        await bot.send_message(user_id, f'C–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤',
                           reply_markup=f_keyboard)
    elif call.data == 'MyButton53':
        user_all = cur.execute('SELECT real_name FROM Users WHERE instanse == "admin"').fetchall()
        user_name_list = [x[0] for x in user_all]
        f_keyboard = types.InlineKeyboardMarkup(row_width=1)
        my_call_clients.clear()
        for i in user_name_list:
            f_keyboard.add(types.InlineKeyboardButton(text=i, callback_data=i))
            my_call_clients.append(i)
        await bot.send_message(user_id, f'C–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤',
                           reply_markup=f_keyboard)



# –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç–µ–∫—Å—Ç–æ–º
@dp.callback_query_handler(text=['MyButton77'], state="*")
async def MyCallBack77(call, state: FSMContext):
    user_id = call.from_user.id
    await bot.send_message(user_id, f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ü–∏—Ñ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü—Ä–∏–º–µ—Ä: 9296086665')
    await Phone.PhoneSearch.set()


@dp.message_handler(IsAdmin(), state=Phone.PhoneSearch)
async def MyCallBack777(message: types.Message, state: FSMContext):
    mes = message.text
    user_id = message.from_user.id
    if len(message.text) == 10:
        check_user = cur.execute('SELECT id, phone, instanse, real_name, date_birth, serv_book, garante, main_recom, secret_key FROM Users WHERE phone == ?', (mes,)).fetchone()
        if user_id in [1757558411, 29720838] and check_user is None:
            add_keyboard = types.InlineKeyboardMarkup(row_width=1)
            add_keyboard.add(b98,b95)
            await message.answer(
                '–í –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º. –Ø –º–æ–≥—É –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä, –Ω–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á. –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∞?',
                reply_markup=add_keyboard)
            new_client.clear()
            new_client.append(mes)
            await state.reset_state()
        elif check_user is None:
            add_keyboard = types.InlineKeyboardMarkup(row_width=1)
            add_keyboard.add(b98)
            await message.answer(
                '–í –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º. –Ø –º–æ–≥—É –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä, –Ω–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á. –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø–∞—Ü–∏–µ–Ω—Ç–∞?',
                reply_markup=add_keyboard)
            new_client.clear()
            new_client.append(mes)
            await state.reset_state()
        else:
            myansw = (f'*–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞*\n'
                      f'*ID*: {check_user[0]}\n'
                      f'*–¢–µ–ª–µ—Ñ–æ–Ω*: {check_user[1]}\n'
                      f'*–°—Ç–∞—Ç—É—Å*: {check_user[2]}\n'
                      f'*–§–ò–û*:{check_user[3]}\n'
                      f'*–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è*:{check_user[4]}\n'
                      f'*–°–µ—Ä–≤–∏—Å–Ω–∞—è –∫–Ω–∏–≥–∞*:\n{check_user[5]}\n'
                      f'*–£—Å–ª–æ–≤–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏*:\n{check_user[6]}\n'
                      f'*–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏*:\n{check_user[7]}\n'
                      f'*–ö–ª—é—á –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è*: {check_user[8]}\n'
                      )
            cor_keyb = types.InlineKeyboardMarkup(row_width=1)
            cor_keyb.add(b21,b22,b26,b27)
            await message.answer(myansw, parse_mode='MarkDown', reply_markup=cor_keyb)
            await state.reset_state()
            update_user.clear()
            update_user.append(check_user[0])

    else:
        await message.answer(
            '–ù–æ–º–µ—Ä –Ω–µ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É–µ—Ç –∑–∞–¥–∞–Ω–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É.  –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞: 9296086665')
        await state.reset_state()

# –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–∞
@dp.callback_query_handler(text=['MyButton22'], state="*")
async def MyCallBack21(call, state: FSMContext):
    user_id = update_user[-1]
    my_meets = cur.execute('SELECT date, time, price, price_state, plan, approve FROM Meets WHERE id=? ORDER BY real_date DESC', (user_id,)).fetchall()
    meets_count = len(my_meets)
    aps = f'–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ø—Ä–∏—ë–º: {meets_count}\n'
    if meets_count > 0:
        dates = []
        time = []
        plan = []
        price = []
        price_state = []
        approves = []
        for i in my_meets:
            dates.append(i[0])
            time.append(i[1])
            plan.append(i[4])
            price.append(i[2])
            price_state.append(i[3])
            approves.append([i[5]])
        for i in range(len(dates)):
            mes = f'*–î–∞—Ç–∞* {dates[i]} *–í—Ä–µ–º—è* {time[i]} *{price_state[i]}* {price[i]} —Ä—É–±. *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ* {approves[i]}\n*–ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è* {plan[i]}'
            aps = aps + mes + '\n'
        f_keyboard = types.InlineKeyboardMarkup(row_width=1)
        f_keyboard.add(b30, b31, b5)
        await bot.send_message(chat_id=call.from_user.id,
                               text=aps, parse_mode='MarkDown', reply_markup=f_keyboard)
    elif meets_count == 0:
        f_keyboard = types.InlineKeyboardMarkup(row_width=1)
        f_keyboard.add(b30,b5)
        await bot.send_message(chat_id=call.from_user.id,
                               text=aps, parse_mode='MarkDown', reply_markup=f_keyboard)

# –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ –∫–ª–∏–µ–Ω—Ç—É
@dp.callback_query_handler(text=['MyButton30'], state="*")
async def MyCallBack30(call, state: FSMContext):
    user_id = update_user[-1]
    last_ids = cur.execute("SELECT id_meets FROM Meets ORDER BY id_meets DESC LIMIT 1").fetchone()
    new_id = last_ids[0] + 1
    real_name = cur.execute("SELECT real_name FROM Users WHERE id=?", (user_id, )).fetchone()
    cur.execute('INSERT INTO Meets(id_meets, id, date, price_state, approve, real_name) VALUES(?,?,?,?,?,?)', (new_id, user_id, '–Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å', '–Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ', '–Ω–µ –∑–∞–ø—Ä–æ—à–µ–Ω–æ', real_name[0]))
    create_add = cur.execute("SELECT * FROM Meets WHERE id_meets=" + str(new_id)).fetchone()
    new_add = (f'–ù–æ–º–µ—Ä *{create_add[0]}*\n'
               f'–§–ò–û *{create_add[11]}*\n'
               f'–î–∞—Ç–∞ *{create_add[2]}*\n'
               f'–í—Ä–µ–º—è *{create_add[3]}*\n'
               f'–¶–µ–Ω–∞ *{create_add[4]}*\n'
               f'–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã *{create_add[5]}*\n'
               f'–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ  *{create_add[9]}*\n'
               f'–ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è *{create_add[6]}*\n'
               f'–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ *{create_add[7]}*\n')
    time_keyboard = types.InlineKeyboardMarkup(row_width=1)
    time_keyboard.add(b40,b41,b42,b43,b44,b45,b22,b5)
    await bot.send_message(chat_id=call.from_user.id,
                           text=new_add, parse_mode='MarkDown', reply_markup=time_keyboard)
    last_id.clear()
    last_id.append(new_id)


buf = []
last_id = []
@dp.callback_query_handler(IsAdmin(),
                           text=['MyButton40', 'MyButton41', 'MyButton42', 'MyButton43', 'MyButton44', 'MyButton45'],
                           state="*")
async def MyCallBackUpdaterZap(call, state: FSMContext):
    user_id = call.from_user.id
    if call.data == 'MyButton40':
        cur.execute('UPDATE Meets SET date=? WHERE id_meets =?', (buf[0], last_id[-1],)).fetchone()
        finish = buf[-1].split(".")
        finish_date = f'{finish[2]}-{finish[1]}-{finish[0]}'
        cur.execute('UPDATE Meets SET real_date=? WHERE id_meets =?', (finish_date, last_id[-1],)).fetchone()
        bd.commit()
    elif call.data == 'MyButton41':
        cur.execute('UPDATE Meets SET time=? WHERE id_meets =?', (buf[0], last_id[-1],)).fetchone()
        bd.commit()
    elif call.data == 'MyButton44':
        cur.execute('UPDATE Meets SET plan=? WHERE id_meets =?', (buf[0], last_id[-1],)).fetchone()
        bd.commit()
    elif call.data == 'MyButton42':
        cur.execute('UPDATE Meets SET price=? WHERE id_meets =?', (buf[0], last_id[-1],)).fetchone()
        bd.commit()
    elif call.data == 'MyButton43':
        cur.execute('UPDATE Meets SET price_state=? WHERE id_meets =?', (buf[0], last_id[-1],)).fetchone()
        bd.commit()
    elif call.data == 'MyButton45':
        cur.execute('UPDATE Meets SET recomend=? WHERE id_meets =?', (buf[0], last_id[-1],)).fetchone()
        bd.commit()
    create_add = cur.execute("SELECT * FROM Meets WHERE id_meets=?", (last_id[-1],)).fetchone()
    new_add = (f'–ù–æ–º–µ—Ä *{create_add[0]}*\n'
               f'–§–ò–û *{create_add[11]}*\n'
               f'–î–∞—Ç–∞ *{create_add[2]}*\n'
               f'–í—Ä–µ–º—è *{create_add[3]}*\n'
               f'–¶–µ–Ω–∞ *{create_add[4]}*\n'
               f'–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã *{create_add[5]}*\n'
               f'–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–∏–∑–∏—Ç–∞ *{create_add[9]}*\n'
               f'–ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è *{create_add[6]}*\n'
               f'–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ *{create_add[7]}*\n')
    time_keyboard = types.InlineKeyboardMarkup(row_width=1)
    time_keyboard.add(b40, b41, b42, b43, b44, b45, b22, b5)
    await bot.send_message(chat_id=call.from_user.id,
                           text=new_add, parse_mode='MarkDown', reply_markup=time_keyboard)

# –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π –ø–æ —é–∑–µ—Ä—É
my_call_buf = []
@dp.callback_query_handler(text=['MyButton31'], state="*")
async def MyCallBack31(call, state: FSMContext):
    user_id = update_user[-1]
    user_meets = cur.execute('SELECT id_meets, date FROM Meets WHERE id=' + str(user_id)).fetchall()
    meets_count = len(user_meets)
    dates = []
    id_meets = []
    for i in user_meets:
        dates.append(i[1])
        id_meets.append(i[0])
    f_keyboard = types.InlineKeyboardMarkup(row_width=1)
    my_call_buf.clear()
    for i in dates:
        f_keyboard.add(types.InlineKeyboardButton(text=i, callback_data=i))
        my_call_buf.append(i)
    await bot.send_message(chat_id=call.from_user.id,
                           text='–í—Å–µ –∑–∞–ø–∏—Å–∏', parse_mode='MarkDown', reply_markup=f_keyboard)



# –ü—Ä–µ–¥ —ç—Ç–∞–ø –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é –∏–Ω—Ñ—ã –≤ –±–∞–∑–µ
@dp.callback_query_handler(text=['MyButton21'], state="*")
async def MyCallBack21(call, state: FSMContext):
    user_id = call.from_user.id
    update_keyboard = types.InlineKeyboardMarkup(row_width=1)
    update_keyboard.add(b28,b13,b14,b15,b17,b18,b19,b20,b26,b27,b5,b22)
    await bot.send_message(user_id,
                           f'‚¨áÔ∏è–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ë–î:\n1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É\n2. –í—ã–±—Ä–∞—Ç—å —è—á–µ–π–∫—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤ –±–∞–∑–µ',
                           reply_markup=update_keyboard)


@dp.callback_query_handler(IsAdmin(),
                           text=['MyButton13', 'MyButton14', 'MyButton15', 'MyButton17', 'MyButton18', 'MyButton19',
                                 'MyButton20', 'MyButton28'], state="*")
async def MyCallBackUpdater(call, state: FSMContext):
    user_id = call.from_user.id
    if call.data == 'MyButton13':
        cur.execute('UPDATE Users SET phone=? WHERE id =?', (buf[-1], update_user[-1],)).fetchone()
        bd.commit()
    elif call.data == 'MyButton14':
        cur.execute('UPDATE Users SET real_name=? WHERE id =?', (buf[-1], update_user[-1],)).fetchone()
        bd.commit()
    elif call.data == 'MyButton15':
        cur.execute('UPDATE Users SET date_birth=? WHERE id =?', (buf[-1], update_user[-1],)).fetchone()
        bd.commit()
    elif call.data == 'MyButton17':
        cur.execute('UPDATE Users SET serv_book=? WHERE id =?', (buf[-1], update_user[-1],)).fetchone()
        bd.commit()
    elif call.data == 'MyButton18':
        cur.execute('UPDATE Users SET garante=? WHERE id =?', (buf[-1], update_user[-1],)).fetchone()
        bd.commit()
    elif call.data == 'MyButton19':
        cur.execute('UPDATE Users SET main_recom=? WHERE id =?', (buf[-1], update_user[-1],)).fetchone()
        bd.commit()
    elif call.data == 'MyButton20':
        cur.execute('UPDATE Users SET secret_key=? WHERE id =?', (buf[-1], update_user[-1],)).fetchone()
        bd.commit()
    elif call.data == 'MyButton28':
        cur.execute('UPDATE Users SET id=? WHERE id =?', (buf[-1], update_user[-1],)).fetchone()
        bd.commit()

    check_user = cur.execute('SELECT id, phone, instanse, real_name, date_birth, serv_book, garante, main_recom, secret_key FROM Users WHERE id == ?', (update_user[-1],)).fetchone()
    myansw = (f'*–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞*\n'
              f'*ID*: {check_user[0]}\n'
              f'*–¢–µ–ª–µ—Ñ–æ–Ω*: {check_user[1]}\n'
              f'*–°—Ç–∞—Ç—É—Å*: {check_user[2]}\n'
              f'*–§–ò–û*: {check_user[3]}\n'
              f'*–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è*: {check_user[4]}\n'
              f'*–°–µ—Ä–≤–∏—Å–Ω–∞—è –∫–Ω–∏–≥–∞*:\n{check_user[5]}\n'
              f'*–£—Å–ª–æ–≤–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏*:\n{check_user[6]}\n'
              f'*–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏*:\n{check_user[7]}\n'
              f'*–ö–ª—é—á –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è*: {check_user[8]}\n'
              )
    update_keyboard = types.InlineKeyboardMarkup(row_width=1)
    update_keyboard.add(b28, b13, b14, b15, b17, b18, b19, b20, b5, b22)
    await bot.send_message(user_id, myansw, parse_mode='MarkDown', reply_markup=update_keyboard)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
path_to = []
@dp.message_handler(IsAdmin(), text=['–æ–±–Ω–æ–≤–∏—Ç—å'], content_types=types.ContentType.DOCUMENT, state="*")
async def MyCallBackDoc(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if not update_user:
        await message.answer(
            '–°–≤—è–∑—å —Å –ø–∞—Ü–∏–µ–Ω—Ç–æ–º –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ü—Ä–æ—Å—å–±–∞ –Ω–∞–π—Ç–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É ')
    else:
        path_to_download = Path().joinpath(str(update_user[-1]))
        path_to_download.mkdir(parents=True, exist_ok=True)
        path_to_download = path_to_download.joinpath(message.document.file_name)
        await message.document.download(destination=path_to_download)
        down_keyboard = types.InlineKeyboardMarkup(row_width=1)
        down_keyboard.add(b51, b52)
        await bot.send_message(user_id,
                               f'–î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥ —é–∑–µ—Ä–∞ {update_user[-1]}. –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞',
                               parse_mode='MarkDown', reply_markup=down_keyboard)
        path_to.clear()
        path_to.append(str(path_to_download))

@dp.message_handler(IsAdmin(), text=['–±–¥'], content_types=types.ContentType.DOCUMENT, state="*")
async def MyCallBacktest(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    path_to_download = Path().joinpath('all_clients')
    path_to_download.mkdir(parents=True, exist_ok=True)
    path_to_download = path_to_download.joinpath(message.document.file_name)
    await message.document.download(destination=path_to_download)
    df = pd.read_excel(path_to_download, sheet_name='–ü–∞—Ü–∏–µ–Ω—Ç')
    dfz = pd.read_excel(path_to_download, sheet_name='–ó–∞–ø–∏—Å–∏')
    phone_number = str(df.loc[0,"–ò–Ω—Ñ–æ"])
    full_name = str(df.loc[1, "–ò–Ω—Ñ–æ"])
    date_birt = df.loc[2, "–ò–Ω—Ñ–æ"]
    date_birth = f'{date_birt.day}.{date_birt.month}.{date_birt.year}'
    serv_book= str(df.loc[3, "–ò–Ω—Ñ–æ"])
    garentee = str(df.loc[4, "–ò–Ω—Ñ–æ"])
    recommend = str(df.loc[5, "–ò–Ω—Ñ–æ"])
    my_key = str(df.loc[6, "–ò–Ω—Ñ–æ"])

    check_user = cur.execute('SELECT real_name FROM Users WHERE phone =?', (phone_number[-10:],)).fetchone()
    if check_user is not None:
        check_step = cur.execute('SELECT id FROM Users WHERE phone =?', (phone_number[-10:],)).fetchone()
        cur.execute('DELETE FROM Users WHERE phone = ?', (phone_number[-10:],))
        cur.execute('DELETE FROM Meets WHERE id= ?', (check_step[0],))
        cur.execute('INSERT INTO Users(id, phone, instanse, real_name, date_birth, serv_book, garante, main_recom, secret_key) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)',
                    (check_step[0], phone_number[-10:], 'friend', full_name, date_birth, serv_book, garentee, recommend, my_key,))
        bd.commit()
        await bot.send_message(user_id,
                               f'–ü–∞—Ü–∏–µ–Ω—Ç {full_name} —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º {phone_number} —É–∂–µ –±—ã–ª –≤ –±–∞–∑–µ –Ω–∞ –º–æ–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏. –í—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã. –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')

    if check_user is  None:
        await bot.send_message(user_id, f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {full_name} —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º {phone_number} –∑–∞–Ω–µ—Å—ë–Ω –≤ –±–∞–∑—É –∫–∞–∫ –Ω–æ–≤—ã–π –ø–∞—Ü–∏–µ–Ω—Ç')
        cur.execute('INSERT INTO Users(id, phone, instanse, real_name, date_birth, serv_book, garante, main_recom, secret_key) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)',
                    (phone_number[-10:], phone_number[-10:], 'friend', full_name, date_birth, serv_book, garentee, recommend, my_key,))
        bd.commit()
    check_user = cur.execute('SELECT id, phone, instanse, real_name, date_birth, serv_book, garante, main_recom, secret_key FROM Users WHERE phone =?', (phone_number[-10:],)).fetchone()
    myansw = (f'*–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞*\n'
                  f'*ID*: {check_user[0]}\n'
                  f'*–¢–µ–ª–µ—Ñ–æ–Ω*: {check_user[1]}\n'
                  f'*–°—Ç–∞—Ç—É—Å*: {check_user[2]}\n'
                  f'*–§–ò–û*: {check_user[3]}\n'
                  f'*–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è*: {check_user[4]}\n'
                  f'*–°–µ—Ä–≤–∏—Å–Ω–∞—è –∫–Ω–∏–≥–∞*:\n{check_user[5]}\n'
                  f'*–£—Å–ª–æ–≤–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏*:\n{check_user[6]}\n'
                  f'*–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏*:\n{check_user[7]}\n'
                  f'*–ö–ª—é—á –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è*: {check_user[8]}\n'
                  )
    await message.answer(myansw,
                             parse_mode='MarkDown')

    for i in range(len(dfz)):
            last_ids = cur.execute("SELECT id_meets FROM Meets ORDER BY id_meets DESC LIMIT 1").fetchone()
            date = f'{dfz.loc[i, "–î–∞—Ç–∞"].day}.{dfz.loc[i, "–î–∞—Ç–∞"].month}.{dfz.loc[i, "–î–∞—Ç–∞"].year}'

            finish_date = dfz.loc[i, "–î–∞—Ç–∞"].strftime("%Y-%m-%d")
            cur.execute('INSERT INTO Meets(id_meets, id, date, time, price, price_state, plan, recomend, real_name, approve, real_date) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
                        (str(last_ids[0]+1), check_user[0], date, str(dfz.loc[i, "–í—Ä–µ–º—è"]),
                         str(dfz.loc[i, "–¶–µ–Ω–∞"]), str(dfz.loc[i, "–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã"]),
                         str(dfz.loc[i, "–ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è"]), str(dfz.loc[i, "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"]), full_name, '–Ω–µ –∑–∞–ø—Ä–æ—à–µ–Ω–æ', finish_date))
            bd.commit()
    my_meets = cur.execute(
            'SELECT date, time, price, price_state, plan, approve FROM Meets WHERE id=? ORDER BY real_date DESC',
            (check_user[0],)).fetchall()
    meets_count = len(my_meets)
    aps = f'–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ø—Ä–∏—ë–º: {meets_count}\n'
    if meets_count > 0:
            dates = []
            time = []
            plan = []
            price = []
            price_state = []
            approves = []
            aps = f'*–í—Å–µ –∑–∞–ø–∏—Å–∏*:\n'
            for i in my_meets:
                dates.append(i[0])
                time.append(i[1])
                plan.append(i[4])
                price.append(i[2])
                price_state.append(i[3])
                approves.append([i[5]])
            for i in range(len(dates)):
                mes = f'*–î–∞—Ç–∞* {dates[i]} *–í—Ä–µ–º—è* {time[i]} *{price_state[i]}* {price[i]} —Ä—É–±. *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ* {approves[i]}\n*–ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è* {plan[i]}'
                aps = aps + mes + '\n'
            f_keyboard = types.InlineKeyboardMarkup(row_width=1)
            f_keyboard.add(b5)
            await bot.send_message(chat_id=user_id,
                                   text=aps, parse_mode='MarkDown', reply_markup=f_keyboard)
            update_user.clear()
            update_user.append(check_user[0])
    os.remove(path_to_download)

# –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å (–∫–ª–∏–µ–Ω—Ç => –∫–ª–∏–Ω–∏–∫–∞)
@dp.callback_query_handler(text=['MyButton3'], state="*")
async def MyCallBack3(call, state: FSMContext):
    user_id = call.from_user.id
    await bot.send_message(user_id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–æ–º/–ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏ –ø–æ –∑–∞–ø–∏—Å–∏. –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏.')
    await Change.ChangeMeet.set()

# –í—Ç–æ—Ä–æ–π —ç—Ç–∞–ø –ø–æ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å (–∫–ª–∏–µ–Ω—Ç => –∫–ª–∏–Ω–∏–∫–∞)
zapros = []
@dp.message_handler(state=Change.ChangeMeet)
async def MyCallBack17(message: types.Message, state: FSMContext):
    mes = message.text
    user_id = message.from_user.id
    zapros.append(message.from_user.first_name)
    zapros.append(mes)
    ad_keyboard = types.InlineKeyboardMarkup(row_width=1)
    b1 = types.InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—åüì©", callback_data="MyButton99")
    b2 = types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—åüîß", callback_data="MyButton3")
    ad_keyboard.add(b1, b2)
    await bot.send_message(user_id, f'–ù–∞–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞?\n–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞:\n{mes}',
                           reply_markup=ad_keyboard)
    await state.reset_state()

# –§–∏–Ω–∞–ª –ø–æ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å (–∫–ª–∏–µ–Ω—Ç => –∫–ª–∏–Ω–∏–∫–∞) –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∞–º
@dp.callback_query_handler(text=['MyButton99'], state="*")
async def MyCallBack3(call, state: FSMContext):
    user_id = call.from_user.id
    check_user = cur.execute('SELECT real_name, phone FROM Users WHERE id =?', (user_id,)).fetchone()
    admins = cur.execute('SELECT id FROM Users WHERE instanse == "admin"').fetchall()
    admin_list = [x[0] for x in admins]
    if check_user is not None:
        fin_zap = (f'–ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–ø—Ä–æ—Å\n'
                   f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å {check_user[0]}\n'
                   f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {check_user[1]}\n'
                   f'–ó–∞–ø—Ä–æ—Å: {zapros[-1]}')
        for i in admin_list:
            await bot.send_message(i, fin_zap)
    elif check_user is None:
        fin_zap = (f'–ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–ø—Ä–æ—Å –æ—Ç —é–∑–µ—Ä–∞ {zapros[0]} –Ω–µ –∏–∑ –±–∞–∑—ã\n'
                   f'–ó–∞–ø—Ä–æ—Å: {zapros[1]}')
        for i in admin_list:
            await bot.send_message(i, fin_zap)
    zapros.clear()
    await bot.send_message(user_id,
                           f'–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–Ω —É—Ç–æ—á–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è')

# –ø–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–Ω—Ç–∞–∫—Ç–∞
new_client = []
@dp.message_handler(IsAdmin(), content_types=types.ContentType.CONTACT, state="*")
async def get_contact(message: types.Message):
    contact = message.contact
    user_id = message.from_user.id
    phone = contact.phone_number[-10:]
    await message.answer(
        f'*–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ –±–∞–∑–µ*\n'
        f'*–ò–º—è* {contact.full_name}\n'
        f'*–¢–µ–ª–µ—Ñ–æ–Ω* {phone}',
        reply_markup=types.ReplyKeyboardRemove(), parse_mode='MarkDown'
    )
    new_client.clear()
    find_id = message.contact.user_id
    check_user = cur.execute('SELECT id, phone, instanse, real_name, date_birth, serv_book, garante, main_recom, secret_key FROM Users WHERE id == ?', (find_id,)).fetchone()

    if user_id in [1757558411, 29720838] and check_user is None:
        add_keyboard = types.InlineKeyboardMarkup(row_width=1)
        add_keyboard.add(b89,b95)
        if message.contact.user_id is None:
            message_info = '–î–∞–Ω–Ω–æ–≥–æ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ. –î–æ–±–∞–≤–∏—Ç—å?'
            await message.answer(
            message_info,
            reply_markup=add_keyboard)
            new_client.append(phone)
        elif message.contact.user_id is not None:
            message_info = '–î–∞–Ω–Ω–æ–≥–æ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ. –î–æ–±–∞–≤–∏—Ç—å?'
            await message.answer(
                message_info,
                reply_markup=add_keyboard)
            new_client.append(message.contact.user_id)
            new_client.append(phone)

    elif check_user is None:
        add_keyboard = types.InlineKeyboardMarkup(row_width=1)
        add_keyboard.add(b89)

        if message.contact.user_id is None:
            message_info = (f'–ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å ID —é–∑–µ—Ä–∞, —Ç–∞–∫ –∫–∞–∫ —É –Ω–µ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.\n'
                           f'ID –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é, –ª–∏–±–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ–∫—Ä—ã—Ç–Ω—ã–π –∫–æ–¥.\n' 
                           f'–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —É –ø–∞—Ü–∏–µ–Ω—Ç–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É. –î–æ–±–∞–≤–∏—Ç—å —é–∑–µ—Ä–∞ –≤ –±–∞–∑—É?')

            await message.answer(
                message_info,
                reply_markup=add_keyboard)
            new_client.append(phone)
        else:
            new_client.clear()
            await message.answer(
                '–í –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–Ω–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –Ω–æ–≤–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞?')
            new_client.append(message.contact.user_id)
            new_client.append(phone)

            await message.answer(
                f'ID: {message.contact.user_id} –¢–µ–ª–µ—Ñ–æ–Ω: {phone}', reply_markup=add_keyboard)
    else:
        myansw = (f'*–ü—Ä–æ—Ñ–∏–ª—å –ü–∞—Ü–∏–µ–Ω—Ç–∞*\n'
                  f'*ID*: {check_user[0]}\n'
                  f'*–¢–µ–ª–µ—Ñ–æ–Ω*: {check_user[1]}\n'
                  f'*–°—Ç–∞—Ç—É—Å*: {check_user[2]}\n'
                  f'*–§–ò–û*: {check_user[3]}\n'
                  f'*–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è*: {check_user[4]}\n'
                  f'*–°–µ—Ä–≤–∏—Å–Ω–∞—è –∫–Ω–∏–≥–∞*:\n{check_user[5]}\n'
                  f'*–£—Å–ª–æ–≤–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏*:\n{check_user[6]}\n'
                  f'*–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏*:\n{check_user[7]}\n'
                  f'*–ö–ª—é—á –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è*: {check_user[8]}\n'
                  )
        await message.answer(myansw,
                              parse_mode='MarkDown')

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —é–∑–µ—Ä–∞ –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç–∞
@dp.callback_query_handler(text=['MyButton89', 'MyButton98', 'MyButton95'], state="*")
async def MyCallBack89(call, state: FSMContext):
    user_id = call.from_user.id
    admins_k = types.InlineKeyboardMarkup(row_width=1)
    admins_k.add(b5)
    if call.data in ['MyButton89', 'MyButton98'] and len(new_client)==2:
        cur.execute('INSERT INTO Users(id, phone, instanse, real_name) VALUES(?, ?, ?, ?)',
                    (new_client[0], new_client[1], 'friend', new_client[1],))
        bd.commit()
        await bot.send_message(chat_id=user_id,
                               text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–Ω–µ—Å—ë–Ω –≤ –±–∞–∑—É', parse_mode='MarkDown', reply_markup=admins_k)
    elif call.data in ['MyButton89', 'MyButton98'] and len(new_client)==1:
        cur.execute('INSERT INTO Users(id, phone, instanse, real_name) VALUES(?, ?, ?, ?)',
                    (new_client[0], new_client[0], 'friend', new_client[0],))
        bd.commit()

        await bot.send_message(chat_id=user_id,
                               text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–Ω–µ—Å—ë–Ω –≤ –±–∞–∑—É. –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á', parse_mode='MarkDown', reply_markup=admins_k)

    elif call.data == 'MyButton95' and len(new_client)==1:
        cur.execute('INSERT INTO Users(id, phone, instanse, real_name) VALUES(?, ?, ?, ?)',
                    (new_client[0], new_client[0], 'admin', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',))
        bd.commit()
        await bot.send_message(chat_id=user_id,
                               text='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–Ω–µ—Å—ë–Ω –≤ –±–∞–∑—É. –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á', parse_mode='MarkDown', reply_markup=admins_k)
    elif call.data == 'MyButton95' and len(new_client)==2:
        cur.execute('INSERT INTO Users(id, phone, instanse, real_name) VALUES(?, ?, ?, ?)',
                    (new_client[0], new_client[1], 'admin', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',))
        bd.commit()
        await bot.send_message(chat_id=user_id,
                               text='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–Ω–µ—Å—ë–Ω –≤ –±–∞–∑—É.', parse_mode='MarkDown', reply_markup=admins_k)


@dp.callback_query_handler(text=['MyButton1'], state="*")
async def MyCallBack1(call, state: FSMContext):
    user_id = call.from_user.id
    mypvic = cur.execute('SELECT real_name, serv_book, garante, main_recom FROM Users WHERE id=?', (user_id,)).fetchone()
    myansw = (f'*–ú–æ—ë –ª–µ—á–µ–Ω–∏–µ*\n'
              f'*–§–ò–û* {mypvic[0]}\n'
              f'*–î–æ–∫—Ç–æ—Ä*: –ê–π–±–æ–ª–∏—Ç–æ–≤ \n'
              f'*–°–µ—Ä–≤–∏—Å–Ω–∞—è –∫–Ω–∏–≥–∞*:\n{mypvic[1]}\n'
              f'*–£—Å–ª–æ–≤–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏*:\n{mypvic[2]}\n'
              f'*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏*:\n{mypvic[3]}\n'
              )
    my_meets = cur.execute('SELECT date, time, plan, price, price_state FROM Meets WHERE id=' + str(user_id)).fetchall()
    meets_count = len(my_meets)
    dates = []
    time = []
    plan = []
    price = []
    price_state = []
    for i in my_meets:
        dates.append(i[0])
        time.append(i[1])
        plan.append(i[2])
        price.append(i[3])
        price_state.append(i[4])
    aps = f'*–ú–æ–∏ –∑–∞–ø–∏—Å–∏*: {meets_count}\n'
    for i in range(len(dates)):
        mes = f'*–î–∞—Ç–∞* {dates[i]} *–í—Ä–µ–º—è* {time[i]} *{price_state[i]}* {price[i]}\n*–ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è* {plan[i]}'
        aps = aps + mes + '\n'

    kab_keyboard = types.InlineKeyboardMarkup(row_width=1)
    kab_keyboard.add(b2, b10, b11, b24)
    await bot.send_message(chat_id=user_id,
                           text=myansw, reply_markup=kab_keyboard, parse_mode='MarkDown')


    await bot.send_message(chat_id=user_id,
                           text=aps, parse_mode='MarkDown')

# –ë–õ–û–ö –° –û–ë–©–ï–ô –ò–ù–§–û–ô
@dp.callback_query_handler(text=['MyButton4'], state="*")
async def MyCallBack2(call, state: FSMContext):
    user_id = call.from_user.id
    about_keyboard = types.InlineKeyboardMarkup(row_width=1)
    about_keyboard.add(b7, b8, b9, b16)
    await bot.send_message(user_id,
                           f"–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∑–∞—Å–ª—É–∂–∏–ª–∏.\n–¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 123 45 55\n–ü–æ—á—Ç–∞ info@dr.ru",
                           reply_markup=about_keyboard, parse_mode="MarkDown")

@dp.callback_query_handler(text=['MyButton8'], state="*")
async def MyCallBack8(call, state: FSMContext):
    user_id = call.from_user.id
    mess = '<a href="https://t.me/">–ê–π–±–æ–ª–∏—Ç–æ–≤ - —ç—Å—Ç–µ—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è</a>'
    await bot.send_message(user_id,
                           text=mess, parse_mode="HTML")

@dp.callback_query_handler(text=['MyButton16'], state="*")
async def MyCallBack16(call, state: FSMContext):
    user_id = call.from_user.id
    site_link = '<a href="https://dr.ru">–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç</a>'
    await bot.send_message(user_id,
                           text=site_link, parse_mode="HTML")

@dp.callback_query_handler(text=['MyButton9'], state="*")
async def MyCallBack8(call, state: FSMContext):
    user_id = call.from_user.id
    discount_mes = (
        f'*–°–∫–∏–¥–∫–∞ 5%* –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞ –ª–µ—á–µ–Ω–∏—è –∏ *–≤–Ω–µ—Å–µ–Ω–∏–∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã* –≤ —Ç–µ—á–µ–Ω–∏–µ 24—á. –ø–æ—Å–ª–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.\n'
        f'*–°–∫–∏–¥–∫–∞ 10%* –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –¥–µ–Ω–µ–∂–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏ –∏–ª–∏ –æ–Ω–ª–∞–∏ÃÜ–Ω –ø–µ—Ä–µ–≤–æ–¥–æ–º.')
    await bot.send_message(user_id,
                           text=discount_mes, parse_mode="MarkDown")

@dp.callback_query_handler(text=['MyButton7'], state="*")
async def MyCallBack7(call, state: FSMContext):
    user_id = call.from_user.id

    adress = (f'*–ö–ª–∏–Ω–∏–∫–∞ "–î–µ–Ω—Ç"*\n'
              f' \n'
              f'—É–ª. –õ–µ—Å–Ω–∞—è, –¥.35\n'
              f' \n'
  )

    await bot.send_message(user_id,
                           text=adress, parse_mode="MarkDown")


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥
secret_client_id = []
@dp.message_handler(text=['–Ø –ø–∞—Ü–∏–µ–Ω—Ç', '—è –ø–∞—Ü–∏–µ–Ω—Ç', '—è–ø–∞—Ü–∏–µ–Ω—Ç', '–Ø–ø–∞—Ü–∏–µ–Ω—Ç'], state="*")
async def i_am_client_func(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    secret_client_id.clear()
    secret_client_id.append(user_id)
    await message.answer(
        f'–ï—Å–ª–∏ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –ø–∞—Ü–∏–µ–Ω—Ç–æ–º –∫–ª–∏–Ω–∏–∫–∏ –∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–≤–æ–µ–π –∫–∞–±–∏–Ω–µ—Ç—É –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.')
    await Client.ClientUp.set()


client_key = []
@dp.message_handler(state=Client.ClientUp)
async def i_am_client_func_f(message: types.Message, state: FSMContext):
    mes = message.text

    mypvic = cur.execute('SELECT secret_key, phone FROM Users WHERE secret_key > 0').fetchall()
    mypvic_list = [x[0] for x in  mypvic]
    if int(mes) in mypvic_list:
        await message.answer(
            f'–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç—Å—è. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —É–∫–∞–∂–∏—Ç–µ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ —Å–≤–æ–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
        await Client.ClientUpp.set()
        client_key.append(str(mes))

    else:
        await message.answer(
            f'–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
        await state.reset_state()


@dp.message_handler(state=Client.ClientUpp)
async def i_am_client_func_f(message: types.Message, state: FSMContext):
    mes = message.text
    user_id = secret_client_id[-1]
    check_user = cur.execute('SELECT phone, real_name FROM Users WHERE secret_key = ?', (client_key[-1],)).fetchone()
    phone_secr = str(check_user[0])
    if mes == phone_secr[-5:]:
        first_client_keyboard = types.InlineKeyboardMarkup(row_width=1)
        first_client_keyboard.add(b1)
        await message.answer(
            f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {check_user[1]}. –î–æ—Å—Ç—É–ø –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É –æ—Ç–∫—Ä—ã—Ç', reply_markup=first_client_keyboard)
        cur.execute('UPDATE Users SET id=? WHERE secret_key =?', (user_id, client_key[-1],))
        cur.execute('UPDATE Users SET secret_key = ? WHERE id =?', (0, user_id,))
        bd.commit()
    elif mes != phone_secr[-5:]:
        await message.answer(
            f'–í–≤–µ–¥–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
    await state.reset_state()


# –•–µ–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–µ –ª–æ–≤–∏—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–ª–ª–±–µ–∫–∏
check_date = []
@dp.callback_query_handler(state="*")
async def MyCallBack33(call, state: FSMContext):
    if call.data in my_call_buf:
        check_date.clear()
        check_date.append(call.data)

        cor_keyboard = types.InlineKeyboardMarkup(row_width=1)
        cor_keyboard.add(b32, b34)
        await bot.send_message(chat_id=call.from_user.id,
                               text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞ {call.data}', reply_markup=cor_keyboard)
    elif call.data in my_call_clients:
        check_user = cur.execute('SELECT id, phone, instanse, real_name, date_birth, serv_book, garante, main_recom, secret_key FROM Users WHERE real_name == ?', (call.data,)).fetchone()
        myansw = (f'*–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ü–∏–µ–Ω—Ç–∞*\n'
                  f'*ID*: {check_user[0]}\n'
                  f'*–¢–µ–ª–µ—Ñ–æ–Ω*: {check_user[1]}\n'
                  f'*–°—Ç–∞—Ç—É—Å*: {check_user[2]}\n'
                  f'*–§–ò–û*: {check_user[3]}\n'
                  f'*–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è*: {check_user[4]}\n'
                  f'*–°–µ—Ä–≤–∏—Å–Ω–∞—è –∫–Ω–∏–≥–∞*:\n{check_user[5]}\n'
                  f'*–£—Å–ª–æ–≤–∏—è –≥–∞—Ä–∞–Ω—Ç–∏–∏*:\n{check_user[6]}\n'
                  f'*–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏*:\n{check_user[7]}\n'
                  f'*–ö–ª—é—á –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è*: {check_user[8]}\n'
                  )
        cor_keyb = types.InlineKeyboardMarkup(row_width=1)
        cor_keyb.add(b21, b22)
        update_user.clear()
        await bot.send_message(chat_id=call.from_user.id, text=myansw, parse_mode='MarkDown', reply_markup=cor_keyb)
        update_user.append(check_user[0])
        if str(check_user[0]) == str(check_user[1]):
            await bot.send_message(chat_id=call.from_user.id, text=f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º —É–∫–∞–∑–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª—é—á')

    elif call.data == 'MyButton32':
        meets_id = cur.execute('SELECT id_meets FROM Meets WHERE date = ? AND id = ?',
                               (check_date[0], update_user[-1],)).fetchone()
        cur.execute('DELETE FROM Meets WHERE id_meets = ?', (meets_id[0],))
        one_keyb = types.InlineKeyboardMarkup(row_width=1)
        one_keyb.add(b22, b5)
        await bot.send_message(chat_id=call.from_user.id,
                               text=f'–ó–∞–ø–∏—Å—å ‚Ññ {meets_id[0]} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã', reply_markup=one_keyb)
    elif call.data == 'MyButton34':
        meets_id = cur.execute('SELECT id_meets FROM Meets WHERE date = ? AND id = ?',
                                (check_date[0], update_user[-1],)).fetchone()

        create_add = cur.execute("SELECT * FROM Meets WHERE id_meets=?", (meets_id[0],)).fetchone()
        new_add = (f'–ù–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ *{create_add[0]}*\n'
                   f'–î–∞—Ç–∞ *{create_add[2]}*\n'
                   f'–í—Ä–µ–º—è *{create_add[3]}*\n'
                   f'–¶–µ–Ω–∞ *{create_add[4]}*\n'
                   f'–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã *{create_add[5]}*\n'
                   f'–ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è *{create_add[6]}*\n'
                   f'–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ *{create_add[7]}*\n')
        time_keyboard = types.InlineKeyboardMarkup(row_width=1)
        time_keyboard.add(b40, b41, b42, b43, b44, b45, b22, b5)
        await bot.send_message(chat_id=call.from_user.id,
                               text=new_add, parse_mode='MarkDown', reply_markup=time_keyboard)
        last_id.clear()
        last_id.append(meets_id[0])

    elif call.data == 'MyButton51':
        cur.execute('UPDATE Users SET plan == ? WHERE id == ?', (path_to[0], update_user[0]))
        bd.commit()
        await bot.send_message(chat_id=call.from_user.id,
                               text=f'–ü–ª–∞–Ω –ª–µ—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è —é–∑–µ—Ä–∞ {update_user[0]}', parse_mode='MarkDown')
    elif call.data == 'MyButton52':
        cur.execute('UPDATE Users SET photoproc == ? WHERE id == ?', (path_to[0], update_user[0]))
        bd.commit()
        await bot.send_message(chat_id=call.from_user.id,
                               text=f'–§–æ—Ç–æ–ø—Ä–æ—Ç–æ–∫–æ–ª –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è —é–∑–µ—Ä–∞ {update_user[0]}', parse_mode='MarkDown')
    elif call.data == 'MyButton61':

        cur.execute('UPDATE Meets SET approve == ? WHERE id == ? AND approve == ?', ('–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ', call.from_user.id, '–∑–∞–ø—Ä–æ—à–µ–Ω–æ'))
        bd.commit()
        await bot.send_message(chat_id=call.from_user.id,
                               text=f'–°–ø–∞—Å–∏–±–æ, –≤–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–ª–∏–Ω–∏–∫—É')

    elif call.data == 'MyButton62':
        cur.execute('UPDATE Meets SET approve == ? WHERE id_meets == ? AND approve == ?', ('–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ', call.from_user.id, '–∑–∞–ø—Ä–æ—à–µ–Ω–æ'))
        bd.commit()
        await bot.send_message(chat_id=call.from_user.id,
                               text=f'–°–ø–∞—Å–∏–±–æ, –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')


# –∫–ª–∞–¥—ë–º –≤ –±—É—Ñ–µ—Ä –∫–∞–∂–¥–æ–µ —Å–≤–µ–∂–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞
@dp.message_handler(IsAdmin(), state="*")
async def my_update_buf(message: types.Message):
    to_buf = message.text
    buf.clear()
    buf.append(to_buf)



if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
